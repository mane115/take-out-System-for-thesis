"use strict"
var request = require("request");
var tokenModule = require("./token");
var getErrMesg = require("./util").getErrMesg;
var TIME_OUT = 10000;
var ENCODING = "UTF-8"
var getSendRequestFunc = function(arg, callbacks, max, timeout) {//这个函数的参数列表如此挫是因为当初没设计好
	timeout = timeout || TIME_OUT;
	var maxRetries = max || 3;
	var checkResult = callbacks.checkResult || 　 function() {
		return true
	};
	var fail = callbacks.fail;
	var success = callbacks.success;
	var initArg = function() {
		arg.timeout = timeout;
		arg.encoding = ENCODING;
	}
	var networkErr = function(e) {
		console.error("请求apiServer出错", e);
		fail(getErrMesg(90001));
	};
	var resetMaxRetries = function() {
		maxRetries = max || 3;
	}
	var sendRequest = function(token) {
		var refreshTokenAndRetry = function(maxRetries) {
			if (maxRetries < 1) {
				console.error("token not found 次数过多,调用将失败");
				resetMaxRetries();
				fail(getErrMesg(90004));
			} else {
				console.warn("没有找到token，将重新申请token重试，剩余的尝试次数是", maxRetries);
				tokenModule.resetToken().then(sendRequest).catch(fail)
			}
		};

		var printResult = function(body){			
			if(body.result.blob){
				var temp = body.result.blob;
				delete body.result.blob;
				console.info("apiServer返回结果(省略了blob属性)是", body);
				body.result.blob = temp;
			}else{
				console.info("apiServer返回结果是", body);
			}
		}
		var parseBody = function(body) {
			var getBodyFromJson = function() {
				if (typeof body === "string") body = JSON.parse(body);
				return body;
			}
			var checkOtherCondtion = function(){
				if(checkResult(body)){
					success(body);
				}else{
					console.error("没有达成2级校验，是因为用户名与ticket不匹配？");
					fail(getErrMesg(11001));
				}
			};
			var retryOrTerminate = function(){
				if(body.status === 10011 || body.status === 10013){
					refreshTokenAndRetry(--maxRetries);
				}else{
					console.error("调用apiServer服务的返回值非0", arg.uri);
					fail(getErrMesg(body.status));					
				}
			}
			body = getBodyFromJson();
			printResult(body);
			if (body.status === 0 ) {
				checkOtherCondtion();
			} else{
				retryOrTerminate();
			}
		};
		var handleServerResponse = function(e, httpResponse, body) {
			if (e && e.code === 'ETIMEDOUT' && e.connect === true) {
				console.error("请求超时");
				fail(90005)
			} else if (e) {
				console.error("网络连接错误", e);
				fail(90001);
			} else {
				parseBody(body);
			}
		};

		var useNewTokenIfNecessary = function() {
			if (token) {
				console.log("将使用新token重发请求")
				console.log("旧的请求url为", arg.uri);
				arg.uri = arg.uri.replace(/access_token=.*/, "access_token=" + token);
				console.log("新的请求url为", arg.uri);
			}
		}

		var uploadImage = function() {
			arg.formData.media = require("fs").createReadStream(arg.formData.media.path);
			request(arg, handleServerResponse);
		}

		var sendSimpleRequest = function() {
			request(arg, handleServerResponse);
		}
		useNewTokenIfNecessary();

		if (arg.formData) { 
			uploadImage();//上传图片
		} else { 
			sendSimpleRequest();//普通的远程请求
		}
	};
	initArg();
	return sendRequest;
}
module.exports = {
	getSendRequestFunc: getSendRequestFunc
}