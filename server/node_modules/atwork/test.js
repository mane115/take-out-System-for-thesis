"use strict";
let assert = require("assert");
let path = require("path");
let request = require("request");
let labRat = "for_lightapp_test_case";
let fs = require("fs");
let config = {
	client_id: "9e702116f0fe4204ab83ec7703a2bfda",
	client_secret: "f5f935852e114f6a948dc613032150d0",
	apiServer: "http://api.workplus.io",
	tenement_id: "atwork",
	maxRetries: 3
};

let corruptedConfig = {
	client_id: "阿弥陀佛",
	client_secret: "阿弥陀佛",
	apiServer: "http://api.workplus.io",
	tenement_id: "atwork",
	maxRetries: 3
};



let deleteCache = function() {
	var modulePrefix = path.resolve();
	Object.keys(require.cache).forEach(function(key) {
		if (key.indexOf(modulePrefix) > -1) {
			delete require.cache[key];
		}
	})
};

let getUserToken = function() {
	return new Promise(function(success, fail) {
		var arg = {
			uri: config.apiServer + "/token",
			encoding: "utf-8",
			json: true,
			headers: {
				"Content-type": "application/json"
			},
			body: {
				grant_type: "password",
				scope: "user",
				tenant_id: "atwork",
				client_id: labRat,
				client_secret: "123456",
				device_id: "device_id",
				device_platform: "android"
			}
		};
		request.post(arg, function(error, res, body) {
			if (typeof body === "string") body = JSON.parse(body);
			success(body.result.access_token);
		});
	})
}

let getAtwork = function(config) {
	let module = path.join(path.resolve(), "atwork.js");
	deleteCache(module);
	return require(module)(config);
};


let getGoodAtwork = function() {
	return getAtwork(config);
}

let getBadAtwork = function() {
	return getAtwork(corruptedConfig);
}

let getFineToken = function() {
	deleteCache();
	global.atworkCfg = config;
	return require("./token");
}

let getBadToken = function() {
	deleteCache();
	global.atworkCfg = corruptedConfig;
	return require("./token");
}

let getRethrowErrFunc = function() {
	return function(e) {
		var emsg = e.mesg || e;
		console.log("错误消息是", emsg, e)
		setTimeout(function() {
			throw emsg;
		})
	}
}

let e = function(err) {
	console.error(err);
}

let printLine = function() {
	console.log("-------------------------------------------------------");
	console.log("-------------------------------------------------------");
	console.log("-------------------------------------------------------");
	console.log("pass, next test case");
	console.log("-------------------------------------------------------");
	console.log("-------------------------------------------------------");
	console.log("-------------------------------------------------------");
}

let errorMsg = function(func, actual, expect) {
	var funcName = func.name;
	var msg = ` test case ${funcName} fail because ${actual} !=  ${expect} `;
	return msg;
}
let regOfToken = /[a-z0-9]{32}/;

let refreshToken = function() {
	return new Promise(function(success, fail) {
		console.log("准备申请新token，让原token失效");
		getGoodAtwork().getAccessToken().then(success).catch(e);
	});
}

let testGetTokenSuccess = function testGetTokenSuccess() {
	return new Promise(function(success, fail) {
		let done = 1;
		let repeat = 4;
		let getTestFunc = function() {
			return function(token) {
				assert.deepStrictEqual(true, true, errorMsg(testGetTokenSuccess, regOfToken.test(token), true));
				if (done < repeat) {
					done++;
				} else {
					printLine();
					success();
				}
			}
		}
		var atwork = getGoodAtwork();
		for (let i = 0; i < repeat; i++) {
			atwork.getAccessToken().then(getTestFunc()).catch(getRethrowErrFunc());
		}
	})
}


let testGetTokenFailAgain = function testGetTokenFailAgain() {
	return new Promise(function(success) {
		let done = 1;
		let repeat = 4;
		let getTestFunc = function(ecode) {
			return function(e) {
				let actual = e.ecode === 90003 || e.ecode === 90006;
				let expect = true;
				if (done < repeat) {
					assert.deepStrictEqual(actual, expect, errorMsg(testGetTokenFailAgain, actual, expect));
					done++;
				} else {
					success();
					printLine();
				}
			}
		};
		var bad = getBadAtwork();
		bad.getAccessToken().then(null, getTestFunc(90003)).catch(getRethrowErrFunc());
		bad.getAccessToken().then(null, getTestFunc(90006)).catch(getRethrowErrFunc());
		bad.getAccessToken().then(null, getTestFunc(90006)).catch(getRethrowErrFunc());
		setTimeout(function() {
			bad.getAccessToken().then(null, getTestFunc(true)).catch(getRethrowErrFunc());
		}, 10000)
	})
};

let getTicket = function(token) {
	return new Promise(function(success, fail) {
		let handleServerResponse = function(error, response, body) {
			console.log("获取ticket返回是", body);
			if (error) throw new Error("获取ticket失败", error);
			success(JSON.parse(body).result.ticket_id);
		}
		request.post(`${config.apiServer}/ticket?access_token=${token}`, handleServerResponse);
	});
}

let testValidateTicketSuccess = function testValidateTicketSuccess() {
	return new Promise(function(success, fail) {
		let atwork = getGoodAtwork();
		let next = function(body) {
			assert.deepStrictEqual(body.status, 0, errorMsg(testValidateTicketSuccess, body.status, 0));
			success();
			printLine();
		}
		let validateTicket = function(ticket) {
			atwork.validateUserTicket(ticket, labRat).then(next).catch(getRethrowErrFunc());
		}
		getUserToken().then(getTicket).then(validateTicket).catch(getRethrowErrFunc())
	});
}


let testTokenNotFound = function() {
	return new Promise(function(success, fail) {
		let atwork = getGoodAtwork();
		let next = function(body) {
			assert.deepStrictEqual(body.status, 0, errorMsg(testValidateTicketSuccess, body.status, 0));
			success();
			printLine();
		}
		let validateTicket = function(ticket) {

			let validateWithOldToken = function() {
				atwork.validateUserTicket(ticket, labRat).then(next).catch(getRethrowErrFunc());
			}
			atwork.getAccessToken().then(refreshToken).then(validateWithOldToken).catch(e);
		}
		getUserToken().then(getTicket).then(validateTicket).catch(getRethrowErrFunc())
	});
}

let testValidateTicketTimeout = function testValidateTicketTimeout() {
	return new Promise(function(success, fail) {
		let atwork = getGoodAtwork();
		let expect = 90001;
		let next = function(ecode) {
			assert.deepStrictEqual(ecode, expect, errorMsg(testValidateTicketTimeout, ecode, expect));
			success();
			printLine();
		}
		let validateTicket = function(ticket) {
			atwork.validateUserTicket(ticket, labRat, 1).then(null, next).catch(getRethrowErrFunc());
		}
		getUserToken().then(getTicket).then(validateTicket).catch(getRethrowErrFunc())
	});
}

let testUploadImgSuccess = function() {
	return new Promise(function(success, fail) {
		let stream = fs.createReadStream("./imgs/pig.jpg");
		let check = function(body) {
			let expect = 0;
			assert.deepStrictEqual(body.status, expect, errorMsg(testUploadImgSuccess, body.status, expect));
			printLine();
			success();
		}
		getGoodAtwork().uploadImage(stream).then(check).catch(getRethrowErrFunc())
	});
}

let testUploadImgTokenNotFound = function() {
	return new Promise(function(success, fail) {
		let check = function(body) {
			let expect = 0;
			assert.deepStrictEqual(body.status, expect, errorMsg(testUploadImgSuccess, body.status, expect));
			printLine();
			success();
		}
		let atwork = getGoodAtwork();
		let upload = function() {
			return atwork.uploadImage(fs.createReadStream("./imgs/pig.jpg"))
		}
		atwork.getAccessToken()
			.then(refreshToken)
			.then(upload)
			.then(check)
			.catch(getRethrowErrFunc())
	});
}

let param = {
	users: [labRat],
	description: "test case",
	coverMediaID: "none",
	url: "none",
	title: "test case",
	content: "test case ",
	coverUrl: "none"
}

let testNotifySuccess = function() {
	return new Promise(function(success, fail) {
		let check = function(body) {
			let expect = 0;
			assert.deepStrictEqual(body.status, expect, errorMsg(testUploadImgSuccess, body.status, expect));
			printLine();
			success();
		}
		getGoodAtwork().notifyWithArticle(param).then(check).catch(getRethrowErrFunc())
	});
}

let testNotifyTokenNotFound = function() {
	return new Promise(function(success, fail) {
		let check = function(body) {
			let expect = 0;
			assert.deepStrictEqual(body.status, expect, errorMsg(testUploadImgSuccess, body.status, expect));
			printLine();
			success();
		}
		let atwork = getGoodAtwork();
		let notify = function() {
			return atwork.notifyWithArticle(param)
		}
		atwork.getAccessToken()
			.then(refreshToken)
			.then(notify)
			.then(check)
			.catch(getRethrowErrFunc())
	});
}


let getFuzzyQueryCheckFunc = (success, fail) => {
	return (body) => {
		let expect = 0;
		assert.deepStrictEqual(body.status, expect, errorMsg(testUploadImgSuccess, body.status, expect));
		assert.deepStrictEqual(body.result[0].account_name, labRat, errorMsg(testUploadImgSuccess, body.status, expect));
		printLine();
		success();
	}
}

let testFuzzyQueryByAccountName = function() {
	return new Promise((success, fail) => {
		let fuzzyQuery = function() {
			return atwork.fuzzyQueryByAccountName(labRat)
		}
		let atwork = getGoodAtwork();
		atwork.getAccessToken()
			.then(fuzzyQuery)
			.then(getFuzzyQueryCheckFunc(success, fail))
			.catch(getRethrowErrFunc())
	})
}

let testFuzzyQueryTokenNotFound = () => {
	return new Promise((success, fail) => {
		let fuzzyQuery = function() {
			return atwork.fuzzyQueryByAccountName(labRat)
		}
		let atwork = getGoodAtwork();

		atwork.getAccessToken()
			.then(refreshToken)
			.then(fuzzyQuery)
			.then(getFuzzyQueryCheckFunc(success, fail))
			.catch(getRethrowErrFunc())
	})
}



Promise.resolve()
	.then(testGetTokenSuccess)
	.then(testGetTokenFailAgain)
	.then(testValidateTicketSuccess)
	.then(testTokenNotFound)
	.then(testValidateTicketTimeout)
	.then(testUploadImgSuccess)
	.then(testUploadImgTokenNotFound)
	.then(testNotifySuccess)
	.then(testNotifyTokenNotFound)
	.then(testFuzzyQueryByAccountName)
	.then(testFuzzyQueryTokenNotFound)
	.catch(e)